{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleNumberClick","e","lastPressed","state","currentNumber","operation","value","target","innerText","Number","isNaN","setState","previousNumber","handleAcClick","handleDecimalClick","includes","handleOperationClick","evaluated","eval","operations","id","numbers","bind","handleClick","this","thisCurrent","currentOperation","className","onClick","map","number","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7e7e0dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lastPressed: '',\n      currentNumber: '0',\n      previousNumber: '',\n      operation: '',\n      operations: [\n        {\n          value: '/',\n          id: 'divide'\n        }, \n        {\n          value: '*',\n          id: 'multiply'\n        }, \n        {\n          value: '-',\n          id: 'subtract'\n        }, \n        {\n          value: '+',\n          id: 'add'\n        }\n      ],\n      numbers: [\n        {\n          value: 7,\n          id: 'seven'\n        },\n        {\n          value: 8,\n          id: 'eight'\n        },\n        {\n          value: 9,\n          id: 'nine'\n        },\n        {\n          value: 4,\n          id: 'four'\n        },\n        {\n          value: 5,\n          id: 'five'\n        },\n        {\n          value: 6,\n          id: 'six'\n        },\n        {\n          value: 1,\n          id: 'one'\n        },\n        {\n          value: 2,\n          id: 'two'\n        },\n        {\n          value: 3,\n          id: 'three'\n        },\n        {\n          value: 0,\n          id: 'zero'\n        }\n      ]\n    }\n\n    this.handleNumberClick = this.handleNumberClick.bind(this);\n    this.handleAcClick = this.handleAcClick.bind(this);\n    this.handleDecimalClick = this.handleDecimalClick.bind(this);\n    this.handleClick = this.handleOperationClick.bind(this);\n  }\n\n  handleNumberClick = (e) => {\n    const lastPressed = this.state.lastPressed;\n    const currentNumber = this.state.currentNumber;\n    const operation = this.state.operation\n    const value = e.target.innerText;\n    \n    if(!Number.isNaN(Number(value))) {\n      if(lastPressed === '=' && operation === '=') {\n        this.setState({\n          lastPressed: value,\n          currentNumber : value,\n          operation: '',\n          previousNumber: ''\n        });\n      } else {\n        if (currentNumber === '0') {\n          this.setState({\n            lastPressed: value,\n            currentNumber : value\n          });\n        } else {\n          this.setState({\n            lastPressed: value,\n            currentNumber : currentNumber + value\n          });\n        }\n      }\n      return\n    }\n  }\n\n  handleAcClick = (e) => {\n    const value = e.target.innerText;\n\n    this.setState({\n      lastPressed: value,\n      currentNumber: '0',\n      previousNumber: '',\n      operation: ''\n    });\n  }\n\n  handleDecimalClick = (e) => {\n    const currentNumber = this.state.currentNumber;\n    const value = e.target.innerText;\n\n    if(!currentNumber.includes('.')) {\n      this.setState({\n        currentNumber: currentNumber + value\n      });\n    }\n  }\n\n  handleOperationClick = (e) => {\n    const lastPressed = this.state.lastPressed;\n    const currentNumber = this.state.currentNumber;\n    const previousNumber = this.state.previousNumber;\n    const operation = this.state.operation\n    const value = e.target.innerText;\n    var evaluated = '';\n   \n    switch(value) {\n      case('=') : {\n        if(!operation) {\n          return false;\n        }\n        else if(currentNumber === '-') {\n          return false;\n        }\n        else if(lastPressed === '=' && operation === '=') {\n          return false;\n        }\n        else {\n          evaluated = eval(`${previousNumber} ${operation} ${currentNumber}`)\n\n          this.setState({\n            lastPressed: value,\n            operation: value,\n            previousNumber: `${previousNumber} ${operation}  ${currentNumber}`,\n            currentNumber: evaluated\n          });\n        }\n        break;\n      }\n      \n      case('*') :\n      case('/') :\n      case('+') : {\n        // If last pressed is equal, use result as first number\n        if(lastPressed === '=' && operation === '=') {\n          this.setState({\n            lastPressed: value,\n            operation: value,\n            previousNumber: currentNumber,\n            currentNumber: '0'\n          });\n        }\n        else if(currentNumber === '0' && lastPressed !== '') {\n          this.setState({\n            lastPressed: value,\n            operation: value,\n          });\n        }\n        // Pressing operation for the firt time\n        else if(!operation) {\n          this.setState({\n            lastPressed: value,\n            operation: value,\n            previousNumber: currentNumber,\n            currentNumber: '0'\n          });\n        }\n        else if(currentNumber !== '-') {\n          this.setState({\n            lastPressed: value,\n            operation: value,\n            previousNumber: `${previousNumber} ${operation}  ${currentNumber}`,\n            currentNumber: '0'\n          });\n        } \n        else {\n          this.setState({\n            lastPressed: value,\n            operation: value,\n            currentNumber: '0'\n          });\n        }\n        break;\n      }\n\n      case('-') : {\n        if (lastPressed === '-') {\n          return false;\n        }\n        if(currentNumber === '0') {\n          this.setState({\n            lastPressed: value,\n            currentNumber: value\n          });\n        }\n        else {\n          this.setState({\n            lastPressed: value,\n            operation: value,\n            previousNumber: `${previousNumber} ${operation}  ${currentNumber}`,\n            currentNumber: '0'\n          });\n        }\n        break;\n      }\n\n      default : {\n        return false;\n      }\n    }\n  }\n\n  render() {\n    const numbers = this.state.numbers;\n    const operations = this.state.operations;\n\n    const previousNumber = this.state.previousNumber;\n    const operation = this.state.operation;\n    const currentNumber = this.state.currentNumber;\n\n    const thisCurrent = currentNumber === '0' ? '' : currentNumber;\n    const currentOperation = currentNumber === '0' && previousNumber === '' ? '' : `${ previousNumber } ${ operation }  ${ thisCurrent }`;\n\n    return (\n      <main id=\"calculator\" className=\"calculator\">\n        <div className=\"calculator-top\">\n          <h1>React JS Calculator</h1>\n          <section className=\"screen\">\n            <div className=\"currentOperation\">\n              { currentOperation }\n            </div>\n            <div className=\"display\" id=\"display\">\n              { currentNumber }\n            </div>\n          </section>\n        </div>\n\n        <div className=\"calculator-buttons\">\n          <section className=\"numbers\">\n            <button \n              className=\"ac\" \n              id=\"clear\"\n              onClick={this.handleAcClick}>\n                AC\n            </button>\n\n            { numbers.map(number => (\n              <button \n                key={ number.value }\n                id={ number.id }\n                onClick={this.handleNumberClick}>\n                { number.value }\n              </button>\n            )) }\n\n            <button \n              className=\"dot\"\n              id=\"decimal\"\n              onClick={this.handleDecimalClick}>\n                .\n            </button>\n\n            <button \n              className=\"equals\"\n              id=\"equals\"\n              onClick={this.handleOperationClick}>\n                =\n            </button>\n          </section>\n\n          <section className=\"operations\">\n            { operations.map(operation => (\n              <button \n                key={ operation.id } \n                id={ operation.id } \n                onClick={this.handleOperationClick}>\n                  { operation.value }\n              </button>\n            )) }\n          </section>\n        </div>\n        \n        \n        \n\n        \n      </main>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}